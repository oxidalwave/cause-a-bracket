networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
services:
  redis:
    command: [ "redis-server", "--appendonly", "yes", "--requirepass", "${SERVICE_PASSWORD_REDIS:-default}" ]
    container_name: cause-a-bracket-redis
    develop:
      watch:
        - action: rebuild
          path: .env
        - action: rebuild
          path: .env.${COMPOSE_SERVICES_APP_BUILD_ARGS_VITEMODE:-compose}
    environment:
      REDIS_USERNAME: "${SERVICE_USER_REDIS:-default}"
      REDIS_PASSWORD: "${SERVICE_PASSWORD_REDIS}"
    healthcheck:
      test: [ "CMD", "redis-cli", "-u", "redis://${SERVICE_USER_REDIS:-default}:${SERVICE_PASSWORD_REDIS}@localhost:6379", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    image: ${COMPOSE_SERVICES_REDIS_IMAGE:-redis:8.0-alpine}
    networks:
      - backend
    ports:
      - "${SERVICE_PORT_REDIS:-6379}:6379"
    profiles:
      - app
      - db
      - devtools
    restart: unless-stopped
    volumes:
      - redis_data:/data
  postgres:
    container_name: cause-a-bracket-postgres
    develop:
      watch:
        - action: rebuild
          path: .env
        - action: rebuild
          path: .env.${COMPOSE_SERVICES_APP_BUILD_ARGS_VITEMODE:-compose}
    environment:
      POSTGRES_USER: "${SERVICE_USER_POSTGRES:-postgres}"
      POSTGRES_PASSWORD: "${SERVICE_PASSWORD_POSTGRES}"
      POSTGRES_DB: "${SERVICE_DATABASE_POSTGRES:-${SERVICE_USER_POSTGRES:-postgres}}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SERVICE_USER_POSTGRES:-postgres} -d ${SERVICE_DATABASE_POSTGRES:-postgres} -h localhost" ]
      interval: 30s
      timeout: 10s
      retries: 3
    image: ${COMPOSE_SERVICES_POSTGRES_IMAGE:-postgres:17}
    networks:
      - backend
    ports:
      - "${SERVICE_PORT_POSTGRES:-5432}:5432"
    profiles:
      - app
      - db
      - devtools
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
  app:
    build:
      args:
        SERVICE_VITEMODE_APP: ${COMPOSE_SERVICES_APP_BUILD_ARGS_VITEMODE:-compose}
        SERVICE_DATABASE_POSTGRES: ${SERVICE_DATABASE_POSTGRES:-${SERVICE_USER_POSTGRES:-postgres}}
        SERVICE_PORT_NGINX: ${SERVICE_PORT_NGINX:-80}
        SERVICE_BASE64_BETTERAUTHSECRET: ${SERVICE_BASE64_BETTERAUTHSECRET}
        SERVICE_PASSWORD_REDIS: ${SERVICE_PASSWORD_REDIS}
        SERVICE_PASSWORD_POSTGRES: ${SERVICE_PASSWORD_POSTGRES}
        SERVICE_CLIENTID_DISCORD: ${SERVICE_CLIENTID_DISCORD}
        SERVICE_CLIENTSECRET_DISCORD: ${SERVICE_CLIENTSECRET_DISCORD}
      context: ${COMPOSE_SERVICES_APP_BUILD_CONTEXT:-.}
    container_name: cause-a-bracket-app
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    develop:
      watch:
        - action: rebuild
          path: Dockerfile
        - action: rebuild
          path: .env
        - action: rebuild
          path: .env.${COMPOSE_SERVICES_APP_BUILD_ARGS_VITEMODE:-compose}
        - action: rebuild
          path: ./src
        - action: rebuild
          path: package.json
        - action: sync
          path: public
          target: public
    healthcheck:
      test: [ "CMD", "node", "-e", "fetch('http://localhost:3000/api/status').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend
      - frontend
    profiles:
      - app
    restart: unless-stopped
  adminer:
    container_name: cause-a-bracket-adminer
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    develop:
      watch:
        - action: rebuild
          path: .env
        - action: rebuild
          path: .env.${COMPOSE_SERVICES_APP_BUILD_ARGS_VITEMODE:-compose}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 30s
      timeout: 10s
      retries: 3
    image: ${COMPOSE_SERVICES_ADMINER_IMAGE:-adminer:latest}
    networks:
      - backend
      - frontend
    profiles:
      - app
      - devtools
    restart: unless-stopped
  commander:
    container_name: cause-a-bracket-commander
    depends_on:
      redis:
        condition: service_healthy
        restart: true
    develop:
      watch:
        - action: rebuild
          path: .env
        - action: rebuild
          path: .env.${COMPOSE_SERVICES_APP_BUILD_ARGS_VITEMODE:-compose}
    environment:
      HTTP_USER: "${SERVICE_USER_REDIS:-default}"
      HTTP_PASSWORD: "${SERVICE_PASSWORD_REDIS}"
      REDIS_HOSTS: "redis:redis:6379:${SERVICE_INDEX_REDIS:-0}:${SERVICE_PASSWORD_REDIS}"
    healthcheck:
      test: [ "CMD", "/redis-commander/bin/healthcheck.js" ]
      interval: 30s
      timeout: 10s
      retries: 3
    image: ${COMPOSE_SERVICES_COMMANDER_IMAGE:-ghcr.io/joeferner/redis-commander:latest}
    networks:
      - backend
      - frontend
    profiles:
      - app
      - devtools
    restart: unless-stopped
  nginx-app:
    container_name: cause-a-bracket-nginx-app
    depends_on:
      app:
        condition: service_healthy
        restart: true
      adminer:
        condition: service_healthy
        restart: true
      commander:
        condition: service_healthy
        restart: true
    develop:
      watch:
        - action: rebuild
          path: .env
        - action: rebuild
          path: .env.${COMPOSE_SERVICES_APP_BUILD_ARGS_VITEMODE:-compose}
        - action: sync+restart
          path: .compose/config/nginx-app/etc/nginx/conf.d
          target: /etc/nginx/conf.d
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 30s
      timeout: 10s
      retries: 3
    image: ${COMPOSE_SERVICES_NGINX_IMAGE:-nginx:1.29}
    networks:
      - frontend
    ports:
      - "${SERVICE_PORT_NGINX:-80}:8080"
    profiles:
      - app
    restart: unless-stopped
    volumes:
      - ./.compose/config/nginx-app/etc/nginx/conf.d:/etc/nginx/conf.d:ro
  nginx-devtools:
    container_name: cause-a-bracket-nginx-devtools
    depends_on:
      adminer:
        condition: service_healthy
        restart: true
      commander:
        condition: service_healthy
        restart: true
    develop:
      watch:
        - action: rebuild
          path: .env
        - action: rebuild
          path: .env.${COMPOSE_SERVICES_APP_BUILD_ARGS_VITEMODE:-compose}
        - action: sync+restart
          path: .compose/config/nginx-devtools/etc/nginx/conf.d
          target: /etc/nginx/conf.d
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 30s
      timeout: 10s
      retries: 3
    image: ${COMPOSE_SERVICES_NGINX_IMAGE:-nginx:1.29}
    networks:
      - frontend
    ports:
      - "${SERVICE_PORT_NGINX:-80}:8080"
    profiles:
      - devtools
    restart: unless-stopped
    volumes:
      - ./.compose/config/nginx-devtools/etc/nginx/conf.d:/etc/nginx/conf.d:ro
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
